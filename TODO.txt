Chris Nappin's play-recaptcha project todo list
===============================================

completed items
---------------
- get something working with recaptcha - done
- ensure it is reactive - done
- add unit test with mock WS - done
- add messages - done
- refactor to plugin with plenty of checks, logging, config - done
- added view templates - done
- make the example look nice - done
- create github account, upload initial code - done
- make sure my personal recpatcha keys aren't checked in! - done
- add license, check code headers - done
- add customize theme using config - done
- add optional tabindex - done
- build for multiple scala versions - done for 2.10.4 and 2.11.1
- write API docs for the client - done (on wiki)
- publish initial release on maven central - done (v0.8)

done for version 0.9
--------------------
- pass lang to reCAPTCHA if supported, otherwise recaptcha.defaultLanguage if set, or "en"
- i18n of example app (with french translation)
- view templates now require implicit request and lang
- support custom strings
- added config: recaptcha.useSecureVerifyUrl, recaptcha.useSecureWidgetUrl - default to false

done for version 1.0
--------------------
- show and verify recaptcha v2, with theme and type

done for version 1.5
---------------------
- upgrade from Play 2.3.x APIs to Play 2.4.x
- convert from Plugin to DI Module

done for version 2.0
--------------------
- merge in pull requests
- upgrade to Play 2.5.x

done for version 2.1
--------------------
- done: added tabindex: add v2 support - g-recaptcha tag data-tabindex => nn
- done: added v2 size support - g-recaptcha tag data-size => compact or normal
- done: added languageMode settings: auto, force, play
        auto = no parameter, let recaptcha detect browser locale itself (the default)
        force = use fixed language (api.js?hl=aa) "forceLanguage" config setting
        play = use Play locale, map to supported languages (api.js?hl=aa or aa-BB)
- done: sorted docs and wiki
- done: remove all recaptcha 1.0 support


todo list for future releases
-----------------------------
- twitter bootstrap HTML customise request:
    - example uses divs rather than dl/dt/dd for label, widget and error message layout
    - divs have custom classes (several, fixed and for errors)

    <div class="@if(elements.hasErrors) {error}">
        <label for="@elements.id">@elements.label</label>
        <div class="input">
            @elements.input
            <span class="errors">@elements.errors.mkString(", ")</span>
            <span class="help">@elements.infos.mkString(", ")</span>
        </div>
    </div>

    - see Play docs - custom field constructors

- plus back port to v1.5 (Play 2.4)??
- extras: ajax api, javascript support
- typesafe activator?


Google reCAPTCHA
----------------
My personal key is registered to nappin.com (but works with localhost)
Google development documentation is at https://developers.google.com/recaptcha/docs/display


github account
--------------
www.github.com, chrisnappin/..

markdown details: https://help.github.com/articles/markdown-basics
wiki details: https://help.github.com/articles/about-github-wikis

module repo: https://github.com/chrisnappin/play-recaptcha
module website (uses gh-pages branch): http://chrisnappin.github.io/play-recaptcha
module wiki: https://github.com/chrisnappin/play-recaptcha/wiki

example repo: https://github.com/chrisnappin/play-recaptcha-example


sonatype account
----------------
https://issues.sonatype.org, chrisnappin/..
groupId = com.nappin


to publish locally
------------------
  activator + publish-local
or
  activator + publish-local-signed
  
- writes to $home\.ivy2\local\com.nappin\play-recaptcha_2.10\0.1-SNAPSHOT
        and $home\.ivy2\local\com.nappin\play-recaptcha_2.11\0.1-SNAPSHOT

(note: when example project resolves the jar locally, it creates eclipse config pointing directly
 to the local archive and Eclipse holds a file lock on this!)
 

to publish on Maven Central
---------------------------
sbt uses the standard Maven2 repository (http://repo1.maven.org/maven/ aka http://central.sonatype.org) by default
see http://mfizz.com/blog/2013/07/play-framework-module-maven-central
and http://central.sonatype.org/pages/ossrh-guide.html
and http://www.scala-sbt.org/release/docs/Using-Sonatype.html

Using the SBT PGP plugin, rather than using GPG itself
- added to project/plugins.sbt:
  addSbtPlugin("com.typesafe.sbt" % "sbt-pgp" % "0.8.3")
  
- create PGP keys (in activator/play shell)
  set pgpReadOnly := false
  pgp-cmd gen-key
  
Name: Chris Nappin
email: chris@nappin.com
passphrase: ..
  
Public key is pubring.asc
Secret key is secring.asc

- then publish the public key:
  pgp-cmd send-key chris@nappin.com hkp://pool.sks-keyservers.net/
(command line said success, but sonatype or key search couldn't find it)
(manually uploaded contents from pubring.asc to https://a.keyserver.pki.scientia.net)

- add extra pom details needed for Sonatype (see build.sbt)

- created $home\.sbt\0.13\sonatype.sbt:
    credentials += Credentials("Sonatype Nexus Repository Manager",
                           "oss.sonatype.org",
                           "chrisnappin",
                           "..")

- run:
  activator + publish-signed 


workflow
--------
make test/beta releases to maven central using a "a.b-SNAPHOTS" version number
- this uploads artifacts to the "snapshots" repo (Maven Central only includes "full" releases)
- snapshots can be published several times (immediately overwrites)
- run "activator update" to explicitly refresh remote snapshot dependencies (otherwise it will try to cache locally)

make "full releases" using a regular version number (e.g. "a.b")
- this uploads artifacts to the "staging" repo
- releases cannot be published several times, have to be deleted first

?? then need to "drop"/"close" (delete release, try again later) or "release" (promote to maven central) the staging repository
- login to https://oss.sonatype.org (using sonatype user account above)
- click on Build Promotion -> Staging Repositories
    - look for groupId without dots and with -nnnn suffix
        - status should be "Open"
        - can manually download and test it
        - can select the repo and click "Close" to trigger evaluation
            (takes a couple of minutes)
            - if fails, need to "Drop", resolve issues (see "Ruleset Evaluation Report") then redeploy to staging
            - if successful, click "Release" to move staging repo to release repo
            (first time you do this, need to update ticket to activate sync)

(sbt-sonatype plugin can be used to automate all of this - see https://github.com/xerial/sbt-sonatype)

- Maven central syncs to release repo, takes about 2 hours
    - cannot update or delete artifacts from this point!

Then use Github Releases with changelog etc
Then update wiki with links to latest release
